Files saved:
- setup.py
- build/lib/savecode/__init__.py
- build/lib/savecode/cli.py
- savecode/__init__.py
- savecode/cli.py
- savecode/utils/output_manager.py
- savecode/utils/__init__.py
- savecode/plugins/save.py
- savecode/plugins/__init__.py
- savecode/manager/manager.py
- savecode/manager/__init__.py



File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/setup.py

"""
setup.py - Packaging configuration for the savecode tool.
Version: 1.2.1
"""

from setuptools import setup, find_packages

setup(
    name='savecode',
    version='1.2.1',
    description='Save Python code from directories and files into one output file.',
    author='Austin Wagner',
    author_email='austinwagner@msn.com',
    url='https://github.com/wagner-austin',
    packages=find_packages(),
    entry_points={
        'console_scripts': [
            'savecode=savecode.cli:main',
        ],
    },
    classifiers=[
        'Programming Language :: Python :: 3',
        'Operating System :: OS Independent',
    ],
    python_requires='>=3.6',
)



File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/build/lib/savecode/__init__.py

__version__ = "1.2.1"



File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/build/lib/savecode/cli.py

"""
cli.py - Save Python code from directories and files into one output file.
Version: 1.2.1
"""

import os
import argparse

def gather_py_files(root_dir, skip_dirs=None):
    """
    Recursively gather all .py files under root_dir,
    skipping any directories listed in skip_dirs.
    """
    skip_dirs = set(skip_dirs or [])
    py_files = []
    current_file = os.path.abspath(__file__)
    for dirpath, dirnames, filenames in os.walk(root_dir):
        # Remove directories that should be skipped so os.walk wonâ€™t traverse them.
        dirnames[:] = [d for d in dirnames if d not in skip_dirs]
        for fname in filenames:
            if fname.endswith(".py"):
                file_path = os.path.join(dirpath, fname)
                # Skip the current script (cli.py)
                if os.path.abspath(file_path) == current_file:
                    continue
                py_files.append(file_path)
    return py_files

def save_code(py_files, output_file):
    """
    Save the code from each Python file in py_files to output_file.
    Each file's code is preceded by a header (with the file path)
    and separated by blank lines.
    """
    with open(output_file, 'w', encoding='utf-8') as out:
        for file in py_files:
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    header = f"\nFile: {file}\n\n"
                    out.write(header)
                    out.write(f.read())
                    out.write("\n\n")
            except Exception as e:
                print(f"Error reading {file}: {e}")

def main():
    parser = argparse.ArgumentParser(
        description="Save the full code from Python files in specified directories and individual files to a single output file."
    )
    parser.add_argument(
        '-r', '--roots',
        nargs='*',
        default=[],
        help="One or more root directories to search for Python files."
    )
    parser.add_argument(
        '-f', '--files',
        nargs='*',
        default=[],
        help="One or more individual Python file paths to include."
    )
    parser.add_argument(
        '-o', '--output',
        default="./temp.txt",
        help="Output file path. Defaults to './temp.txt' (in the same directory as cli.py)."
    )
    parser.add_argument(
        '--skip',
        nargs='*',
        default=['rnn_src'],
        help="Subdirectory names to skip (default: ['rnn_src'])."
    )
    args = parser.parse_args()

    all_py_files = []

    # Gather Python files from specified directories.
    for root in args.roots:
        all_py_files.extend(gather_py_files(root, args.skip))

    # Add individual Python files, ensuring they exist and have the correct extension.
    for file in args.files:
        if os.path.isfile(file) and file.endswith(".py"):
            # Skip the current script (cli.py)
            if os.path.abspath(file) == os.path.abspath(__file__):
                continue
            all_py_files.append(file)
        else:
            print(f"Warning: {file} is not a valid Python file.")

    # Set output file to temp.txt in the same directory as cli.py if the default is used.
    if args.output == "./temp.txt":
        script_dir = os.path.dirname(os.path.abspath(__file__))
        output_file = os.path.join(script_dir, "temp.txt")
    else:
        output_file = args.output

    save_code(all_py_files, output_file)

    # Print the list of saved files with colors.
    green = "\033[1;32m"
    blue = "\033[1;34m"
    cyan = "\033[1;36m"
    reset = "\033[0m"
    print(f"\n{cyan}Saved code from {len(all_py_files)} files to {output_file}{reset}")
    print(f"\n{green}Files saved:{reset}")
    for f in all_py_files:
        print(f"{blue}- {f}{reset}")
    print("\n")

if __name__ == "__main__":
    main()



File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/savecode/__init__.py

"""
savecode/__init__.py - Initialize the savecode package.
Version: 1.2.1
"""

# Optionally expose manager functions
from .manager import run_plugins, list_plugins


File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/savecode/cli.py

"""
cli.py - Entry point for savecode system. Aggregates plugins to gather and save Python code.
Version: 1.2.1
"""

import argparse
import os
# Import the plugins package to ensure all plugins are registered.
import savecode.plugins
from savecode.manager.manager import run_plugins
from savecode.utils.output_manager import configure_output_path

def main():
    """
    Main entry point for the savecode CLI.
    Parses command-line arguments, builds a shared context, and runs the plugins.
    """
    parser = argparse.ArgumentParser(
        description="Save the full code from Python files in specified directories and individual files to a single output file."
    )
    parser.add_argument(
        '-r', '--roots',
        nargs='*',
        default=[],
        help="One or more root directories to search for Python files."
    )
    parser.add_argument(
        '-f', '--files',
        nargs='*',
        default=[],
        help="One or more individual Python file paths to include."
    )
    parser.add_argument(
        '-o', '--output',
        default="./temp.txt",
        help="Output file path. Defaults to './temp.txt'."
    )
    parser.add_argument(
        '--skip',
        nargs='*',
        default=['rnn_src'],
        help="Subdirectory names to skip (default: ['rnn_src'])."
    )
    args = parser.parse_args()

    # Build a shared context for all plugins.
    context = {
        'roots': args.roots,
        'files': args.files,
        'skip': args.skip,
        'output': configure_output_path(args.output)
    }

    run_plugins(context)

    # After plugins run, display a summary.
    all_py_files = context.get('all_py_files', [])
    green = "\033[1;32m"
    blue = "\033[1;34m"
    cyan = "\033[1;36m"
    reset = "\033[0m"
    print(f"\n{cyan}Saved code from {len(all_py_files)} files to {context['output']}{reset}")
    print(f"\n{green}Files saved:{reset}")
    for f in all_py_files:
        # Convert each absolute file path to a relative path from the current working directory.
        rel_path = os.path.relpath(f, os.getcwd())
        print(f"{blue}- {rel_path}{reset}")
    print("\n")

if __name__ == "__main__":
    main()


File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/savecode/utils/output_manager.py

"""
savecode/utils/output_manager.py - Handles configuration of the output file path.
Version: 1.2.1
"""

import os

def configure_output_path(output_arg):
    """
    Configures the output file path.

    If the output_arg is the default ("./temp.txt"), this function creates a new
    folder named "savecode" in the current working directory and returns the full path
    to "temp.txt" inside that folder. Otherwise, it returns the output_arg as provided.

    :param output_arg: The output file path argument.
    :return: The configured output file path.
    """
    if output_arg == "./temp.txt":
        output_dir = os.path.join(os.getcwd(), "savecode")
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        return os.path.join(output_dir, "temp.txt")
    else:
        return output_arg



File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/savecode/utils/__init__.py

"""
savecode/utils/__init__.py - Initializes the utils module for savecode.
Version: 1.2.1
"""

from .output_manager import configure_output_path


File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/savecode/plugins/save.py

"""
save.py - Plugin to save code from Python files into a single output file.
Version: 1.2.1
"""

import os
from savecode.manager.manager import register_plugin

@register_plugin
class SavePlugin:
    """
    Plugin that reads Python files and writes their content to a designated output file.
    """
    def run(self, context):
        """
        Execute the saving process.
        
        Expects the following keys in context:
          - 'all_py_files': list of Python file paths gathered by the GatherPlugin.
          - 'output': the output file path where the combined code should be saved.
        """
        all_py_files = context.get('all_py_files', [])
        output_file = context.get('output', "./temp.txt")
        try:
            with open(output_file, 'w', encoding='utf-8') as out:
                # Write a summary header at the beginning of the file.
                summary = "Files saved:\n"
                for file in all_py_files:
                    rel_path = os.path.relpath(file, os.getcwd())
                    summary += f"- {rel_path}\n"
                summary += "\n\n"
                out.write(summary)
                
                # Now write the contents of each file.
                for file in all_py_files:
                    try:
                        with open(file, 'r', encoding='utf-8') as f:
                            header = f"\nFile: {file}\n\n"
                            out.write(header)
                            out.write(f.read())
                            out.write("\n\n")
                    except Exception as e:
                        print(f"Error reading {file}: {e}")
        except Exception as e:
            print(f"Error writing to output file {output_file}: {e}")


File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/savecode/plugins/__init__.py

"""
savecode/plugins/__init__.py - Initialize the plugins package for savecode.
Version: 1.2.1
"""

# Import plugins to ensure they are registered.
from . import gather
from . import save



File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/savecode/manager/manager.py

"""
savecode/manager/manager.py - Manager for savecode plugins. Coordinates the pipeline of tasks.
Version: 1.2.1
"""

# Global registry for plugins
PLUGIN_REGISTRY = []

def register_plugin(cls):
    """
    Decorator to register a plugin class.
    The plugin must implement a public `run(context)` method.
    
    :param cls: The plugin class to register.
    :return: The original class.
    """
    PLUGIN_REGISTRY.append(cls())
    return cls

def run_plugins(context):
    """
    Run all registered plugins in sequence using the given context.
    
    :param context: Dictionary containing the context and shared data.
    """
    for plugin in PLUGIN_REGISTRY:
        plugin.run(context)

def list_plugins():
    """
    List the names of all registered plugins.
    
    :return: List of plugin class names.
    """
    return [plugin.__class__.__name__ for plugin in PLUGIN_REGISTRY]



File: /storage/emulated/0/Documents/Pydroid3/Termux_Directory/savecode/savecode/manager/__init__.py

"""
savecode/manager/__init__.py - Initializes the manager module for savecode.
Version: 1.2.1
"""

from .manager import register_plugin, run_plugins, list_plugins

